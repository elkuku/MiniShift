#!/usr/bin/env bash

#
# https://github.com/isislovecruft/scripts/blob/master/check-commit-signature
# @todo check https://gist.github.com/caniszczyk/1327469
#

ROOT_DIR=`realpath "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."`

ROOT=$(realpath ${ROOT_DIR}/../..)
PROJECT=$(basename ${ROOT_DIR} .git)

${ROOT}/bin/console update ${PROJECT}

read oldrev newrev refname;

## server config
##################
allowunsignedcommits=$(git config --bool hooks.allowunsignedcommits)
allowunsignedtags=$(git config --bool hooks.allowunsignedtags)
allowcommitsonmaster=$(git config --bool hooks.allowcommitsonmaster)
allowhotfixonmaster=$(git config --bool hooks.allowhotfixonmaster)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)

## committers and their signing GPG key fingerprints should go in the
## ${collaborators} array:
##
## we hard code the fingerprint to protect against the possibility of the gpg
## on the remote git server updating the keys (if it is configured to do so,
## and also configured to use short keyids) and pulling in a colliding key from
## a keyserver.
##
declare -A collaborators
## Add collaborators like so:
##
## collaborators['nickname']='FINGERPRINT'
##
## For example, to add me, do:
##
## collaborators['isis']='0A6A 58A1 4B59 46AB DE18  E207 A3AD B67A 2CDB 8B35'

collaborators['elkuku']='7586 EEFC 90C2 B5CA 0B1C  9C9C 9F91 02C3 C2FF 66A3'

## get the keyids from the fingerprints above:
declare -A trusted_keys
for collab in "${!collaborators[@]}"; do
    fpr="${collaborators["$collab"]}"
    shortid=$(echo "$fpr" | cut -d ' ' --output-delimiter='' -f 8,9,10,11)
    trusted_keys["$collab"]="$shortid"
done

is_allowed_signer() {
    signing_keyid=$1

    if [ -z "$signing_keyid" ]; then
        echo "*** Error: is_allowed_signer(): No key ID supplied" >&2
        return 1
    fi

    fpr_signing_keyid=$(gpg --fingerprint "$signing_keyid" | \
        grep -o -E "([0-9A-F]{4}[[:space:]]{0,2}){10}")

    #echo SIGNING.. $signing_keyid
    #echo FPR...... $fpr_signing_keyid

    allowed_keyid=1

    for collab in "${!trusted_keys[@]}"; do
        keyid="${trusted_keys["$collab"]}"

        #echo CHECK KEY $keyid
        #echo COLLAB $collab

        if [ "$signing_keyid" = "$keyid" ]; then
            ## check that the fingerprint of the key that
            ## gave us a good signature matches the
            ## hardcoded ones:
            if [ "$fpr_signing_keyid" = "${collaborators["$collab"]}" ]; then
                allowed_keyid=0
                break
            fi
        fi
    done

    return $allowed_keyid
}



#echo oldrev $oldrev
#echo newrev $newrev
#echo refname $refname

if [[ "${refname}" != "/refs/heads/master" && "${refname}" != "refs/heads/master" ]]; then
  echo "ERROR: Only pushes to the 'master' branch are allowed"
 # exit 1
fi

short_ref=${refname##refs/tags/}
#echo $short_ref

## a hash full of zeroes is how Git represents "nothing"
zero="0000000000000000000000000000000000000000"

## get all new commits on branch ref, even if it's a new branch
if [ "$oldrev" = "$zero" ]; then
    # list everything reachable from rev_new but not any heads
    span=$(git rev-list $newrev --not --branches='*')
else
    span=$(git rev-list ^$oldrev $newrev)
fi

#echo SPAN $span

if [ -z "$span" ]; then
    ## rev_new pointed to something considered by "git rev-list" to be
    ## already in the commit graph, which could be a commit (if we're
    ## adding a lightweight tag) or a tag object (if we're adding an
    ## annotated tag), since "git rev-list" doesn't consider the tag
    ## object to be separate from the commit it points to

    type=$(git cat-file -t $newrev)
#echo TYPE $type
    case $type in
        commit)
            ## lightweight tag
            if [ "$allowunsignedtags" != "true" -o "$allowunannotated" != "true" ]; then
                echo "*** The un-annotated tag $short_ref is not allowed in this repository" >&2
                echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
                exit 1
            fi
            ;;
        tag)
            ## annotated tag
            if [ "$oldrev" != $zero -a "$allowmodifytag" != "true" ]; then
                echo "*** Tag $short_ref already exists." >&2
                echo "*** Modifying a tag is not allowed in this repository." >&2
                exit 1
            else
                if [ "$allowunsignedtags" != "true" ]; then
                    result=$(git verify-tag $newrev 2>&1 >/dev/null)

                    #echo RESULT $result

                    if ! grep '^gpg: Good signature' <<< "$result"; then
                        ### Check German
                        if ! grep '^gpg: Korrekte Signatur' <<< "$result"; then
                            echo "*** Tag $short_ref is not signed" >&2
                            exit 1
                        fi
                    fi

                    signing_keyid=$(<<<"$result" grep "^gpg: Signature made" | \
                        grep -o -E "key ID [0-9A-Fa-f]{8,16}" | \
                        cut -d ' ' -f 3 )

                    if [ -z "$signing_keyid" ]; then
                        ### Check German
                        signing_keyid=$(<<<"$result" grep "mittels RSA-Schlüssel" | \
                            grep -o -E "[0-9A-Fa-f]{8,16}" | \
                            cut -d ' ' -f 3 )
                    fi

                    if is_allowed_signer ${signing_keyid}; then
                        echo "*** Good signature on tag $short_ref by signing key $signing_keyid" >&2
                    else
                        echo "*** Rejecting tag $short_ref due to lack of a valid GPG signature" >&2
                        exit 1
                    fi
                fi
            fi
            ;;
        *)
            echo "*** No new commits, but the pushed ref $refname is a \"$type\" instead of a tag? I'm confused." >&2
            exit 1
            ;;
    esac
fi

########
### Check commits
########

## for all the commits in the series, check the type of the commit against the
## commit directly before it:
rev_cur=$oldrev                   ## set the current rev to the previous HEAD
for commit in $span ; do

    #echo COMMIT $commit
    ## check that the current revison object is a hexidecimal hash of length 40
    check_rev=$(git rev-parse --verify "$commit")
    if ! grep -q -E '^[0-9A-Fa-f]{40}$' <<< $check_rev; then
        echo "*** Commit hash is not 40 hex characters" >&2
        exit 1
    fi

    #echo CHECK_REV $check_rev

    ## get the commit type of the current rev:
    ## a commit with a hash full of zeros is a deletion of a ref
    if [ "$commit" = "$zero" ]; then
        commit_type=delete
    else
        if [ "$rev_cur" = "$zero" ]; then
            ## there was no previous commit to check against,
            ## so this is the first commit on a branch
            commit_type=$(git cat-file -t "$commit")
        else
            merge=$(git rev-list -n 1 --merges "$rev_cur".."$commit")
            if test -n "$merge"; then
                commit_type=merge
            else
                commit_type=$(git cat-file -t "$commit")
            fi
        fi
    fi

    #echo COMMIT_TYOE $commit_type

    ## the following returns non-null if $rev_cur is originating from branches
    ## beginning with the name "devel":
    #is_from_develop=$(git branch --contains "$commit" | grep devel )


    ## the following returns non-null if $rev_cur is a signed tag:
    is_signed_tag=$(git tag --verify "$refname" 2>&1 >/dev/null | grep '^gpg:')

    ## the following returns non-null if $rev_cur has a signature, and gpg reports
    ## the signature is good:
    has_good_sig=$(git show --no-patch --format=%H --show-signature "$commit" | grep "^gpg: Good signature")

    if [ -z "$has_good_sig" ]; then
        ### Check German
        has_good_sig=$(git show --no-patch --format=%H --show-signature "$commit" | grep "^gpg: Korrekte Signatur")
    fi

    ## the following extracts the signing keyid (either short or long) from the
    ## signature on $rev_cur:
    signing_keyid=$(git show --no-patch --format=%H --show-signature "$commit" | \
        grep -o -E "key ID [0-9A-Fa-f]{8,16}" | \
        cut -d ' ' -f 3 )

    if [ -z "$signing_keyid" ]; then
        ### Check German
        signing_keyid=$(git show --no-patch --format=%H --show-signature "$commit" | \
            grep -o -E "mittels RSA-Schlüssel [0-9A-Fa-f]{8,16}" | \
            cut -d ' ' -f 3 )
    fi

   fpr_signing_keyid=$(gpg --fingerprint "$signing_keyid" | \
        grep -o -E "([0-9A-F]{4}[[:space:]]{0,2}){10}")

    case "$refname","$commit_type" in
        refs/heads/*,commit)
            ## commit on any branch
            if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
                echo "*** Creating a branch is not allowed in this repository" >&2
                exit 1
            fi

            if [ "$allowunsignedcommits" != "true" ]; then
                if [ -z "$has_good_sig" ]; then
                    echo "*** Bad signature on commit $commit" >&2
                    exit 1
                fi

                if is_allowed_signer $signing_keyid; then
                    echo "*** Good signature on commit $commit by signing key $signing_keyid" >&2
                else
                    echo "*** Key $signing_keyid is not allowed to sign commit $commit" >&2
                    exit 1
                fi
            fi
            ;;
        refs/heads/master,merge)
            ## only allow merges to master from release-* and develop/*
            #if test -z "$is_from_develop" -a -z "$is_from_release"; then
            #    echo "*** Branch master only takes merge commits originating from develop/* or release-* branches" >&2
            #    exit 1
            #else
                if [ "$allowunsignedcommits" != "true" ]; then
                    if [ -n "$has_good_sig" -a -n "$signing_keyid" ]; then
                        if is_allowed_signer $signing_keyid; then
                            echo "*** Good signature on merge $commit by signing key $signing_keyid" >&2
                        else
                            echo "*** Key $signing_keyid is not allowed to sign merge $commit" >&2
                            exit 1
                        fi
                    else
                        echo "*** Merges must be signed with an authorised key" >&2
                        exit 1
                    fi
                fi
           # fi
            ;;
        refs/heads/*,merge)
            ## merge into non-master branch
            if [ "$allowunsignedcommits" != "true" ]; then
                if [ -n "$has_good_sig" -a -n "$signing_keyid" ]; then
                    if is_allowed_signer $signing_keyid; then
                        echo "*** Good signature on merge $commit by signing key $signing_keyid" >&2
                    else
                        echo "*** Key $signing_keyid is not allowed to sign merge $commit" >&2
                        exit 1
                    fi
                else
                    echo "*** Merges must be signed with an authorised key" >&2
                    exit 1
                fi
            fi
            ;;
        refs/heads/master,delete)
            # delete branch
            if [ "$allowdeletebranch" != "true" ]; then
                echo "*** Deleting master is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        refs/heads/master,*)
            ## kill it with fire
            echo "*** Branch master only takes merge commits originating from develop/* or release-* branches" >&2
            exit 1
            ;;
        refs/tags/*,delete)
            ## delete tag
            if [ "$allowdeletetag" != "true" ]; then
                echo "*** Deleting a tag is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        refs/remotes/*,commit)
            ## tracking branch
            ;;
        refs/remotes/*,delete)
            ## delete tracking branch
            if [ "$allowdeletebranch" != "true" ]; then
                echo "*** Deleting a tracking branch is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        *)
            ## Anything else (is there anything else?)
            echo "*** Unknown type of update to ref $refname of type $commit_type " >&2
            exit 1
            ;;
    esac
    ## increment the current rev to the $commit we just checked:
    rev_cur=$commit
done
